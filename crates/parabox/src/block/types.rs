use slotmap::new_key_type;
use std::fmt::Debug;

/// A size or pos, just an alias to `(usize, usize)`.
pub type Size = (usize, usize);

new_key_type! {
    /// A key of a block.
    ///
    /// Each block has a unique key that can be used by [World] to refer to itself.
    ///
    /// The key is generated by [slotmap].
    pub struct BlockKey;
}

/// A position of a block.
///
/// The position includes the container and the pos in the interior of the
/// container.
///
/// The container can be `None`, which means the block is an _orphan_. The pos
/// is then meaningless.
#[derive(Default, Copy, Clone, PartialEq, Eq, Hash)]
pub struct Position {
    /// The optional container of the block.
    pub container: Option<BlockKey>,
    /// The pos in the interior of the container.
    pub pos: Size,
}

impl Position {
    /// Creates a new position.
    pub fn new(container: Option<BlockKey>, pos: Size) -> Self {
        Self { container, pos }
    }

    /// Creates a new orphan position.
    pub fn orphan() -> Self {
        Self::new(None, Size::default())
    }

    /// Creates a new position inside a container.
    pub fn inside(container: BlockKey, pos: Size) -> Self {
        Self::new(Some(container), pos)
    }
}

impl Position {
    /// Returns whether the position is an orphan.
    ///
    /// See [Position] for more information.
    pub fn is_orphan(&self) -> bool {
        self.container.is_none()
    }
}

impl Debug for Position {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self.container {
            None => write!(f, "<orphan>"),
            Some(container) => write!(f, "{:?}@{:?}", container, self.pos),
        }
    }
}
